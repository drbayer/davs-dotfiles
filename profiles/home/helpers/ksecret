#!/usr/bin/env ruby

require 'optparse'
require 'yaml'

options = {}

opts = OptionParser.new do |o|
    o.banner = "Usage: #{$0} [OPTIONS]"
    o.separator "Build skeleton secrets file with placeholders for secrets pulled in by k8s-dep.yml"
    o.separator ""
    o.on("-a", "--appname APPNAME", "The name of the application owning the secrets") {|v| options[:appname] = v}
    o.on("-d", "--deployfile DEPLOYFILE", "The k8s application deployment file") {|v| options[:deployfile] = v}
    o.on("-s", "--secretfile SECRETFILE", "The k8s secret file to build. Existing file will be overwritten. Will print to screen if omitted.") {|v| options[:secretfile] = v}
    o.on_tail("-h", "--help", "Show this help message") do
        puts o
        exit
    end
end

begin
    opts.parse! ARGV
    raise OptionParser::MissingArgument, 'APPNAME' if options[:appname].nil?
    raise OptionParser::MissingArgument, 'DEPLOYFILE' if options[:deployfile].nil?
    #raise OptionParser::MissingArgument, 'SECRETFILE' if options[:secretfile].nil?
rescue => arg_err
    puts "#{arg_err.message}"
    puts opts
    exit
end

begin
    deploy = YAML.load_file(File.expand_path(options[:deployfile]))
    containers = deploy['spec']['template']['spec']['containers']
    volumes = deploy['spec']['template']['spec']['volumes']
rescue SystemCallError
    puts "Error opening #{options[:deployfile]}"
    exit
rescue Psych::SyntaxError
    puts "YAML error loading #{options[:deployfile]}"
    exit
end

secrets = {}
secrets["apiVersion"] = 'v1'
secrets["data"] = {}
secrets["kind"] = 'Secret'
secrets["metadata"] = { 'name' => "#{options[:appname]}" }
secrets["type"] = 'Opaque'

containers.map do |c|
    c['env'].map do |e|
        if e.keys.include?('valueFrom') && e['valueFrom'].keys.include?('secretKeyRef')
            secrets['data'][e['valueFrom']['secretKeyRef']['key']] = nil
        end
    end
end

volumes.map do |m|
    if m['secret'].keys.include?('items') 
        m['secret']['items'].map {|i| secrets['data'][i['path']] = nil}
    end
end

if options[:secretfile].nil?
    puts secrets.to_yaml
else
    File.open(options[:secretfile], 'w') do |f|
        f.write(secrets.to_yaml)
    end
end
